{
    "node"
:
    "22a99be82783",
        "path"
:
    "README.rst",
        "data"
:
    "========\nOverview\n========\n\ndjango-janitor allows you to use bleach_ to clean HTML stored in a Model's field.\n\nFeatures\n--------\n* You don't need to edit an existing app (django-janitor listens for a Models' pre_save signal)\n* Allowed HTML tags, attributes, and css are specified in a whitelist\n* Whitelists are managed in Django's Admin\n* There are (sensible) default whitelists included\n\nRequirements\n------------\n* Requires Bleach >= 1.1.0\n* Requires Django >= 1.3.1\n\nInstallation\n------------\nTo install the most recent release::\n\n    pip install django-janitor\n\nTo install from the current repository::\n    \n    pip intall hg+https://bitbucket.org/bkmontgomery/django-janitor/\n\nThen, add ``janitor`` to your installed apps, and run ``syncdb``.\n\nUsage\n-----\n\nBrowse to the Janitor app in Django's Admin, and create a new Field sanitizer. Then \nselect the Model and specify the fieldname which should be cleaned. After you set up \nthe whitelists for Tags, Attributes, etc, save the Field sanitizer.\n\nThen, when you save the Model to which the Field Sanitizer is associated, the content \nin the specified field will be cleaned using bleach_.\n\nHere's a Screenshot: \n\n|screenshot|\n\nTests\n-----\n\nThere are a few tests in ``janitor/tests``. You can run these with::\n    \n    python manage.py tests janitor\n\nThese tests dynamically add a sample app/model to ``INSTALLED_APPS``, then \ncalling ``syncdb``. Unfortunately, this fails for some versions of pyscopg2 \nin Django 1.3 with::\n\n    psycopg2.ProgrammingError: autocommit cannot be used inside a transaction\n\nThis should work correctly in Django 1.4, though.\n\nManagement Commands\n-------------------\n\nThere are a few managment commands avaialable to make it easier to use django-janitor. The\nfirst is ``clean_all`` which will look at all of the models that have a related Field Sanitizer, \ncalling the models' ``save`` method to trigger the ``pre_save`` signal (which forces the fields\nto be cleaned)::\n\n    python manage.py clean_all\n\nThis is useful if you've created a ``FieldSanitizer`` for a model with existing content. \n\nThe second management command is ``clean_model``, which works in a similar fashion, but allows you\nto specify an app and a model::\n\n    python manage.py clean_model myapp.MyModel\n\nFinally, ``list_html_elements`` and ``list_html_elements_for_model`` exist to help you discover what \nHTML elements are being used in existing content.  While these commands do require that a ``FieldSanitizer``\nbe configured for existing Models, they may be used to help you decide which tags to include in a whitelist.\n\nYou should run these commands before using ``clean_all`` or ``clean_model`` to see what sort of data \nexists before it's cleaned::\n\n    python manage.py list_html_elements\n\nOr::\n    \n    python manage.py list_html_elements_for_model myapp.MyModel\n\n.. _bleach: https://github.com/jsocol/bleach\n.. |screenshot| image:: https://bitbucket.org/bkmontgomery/django-janitor/raw/d8e9dae3273e/screenshot.png\n\n"
}